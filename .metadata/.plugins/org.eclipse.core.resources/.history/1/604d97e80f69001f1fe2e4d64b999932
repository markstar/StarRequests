<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx">
	
	<fx:Script>
		<![CDATA[
			import couk.markstar.starrequests.requests.ExampleSynchronousRequest;
			import couk.markstar.starrequests.requests.IRequest;
			import couk.markstar.starrequests.requests.LoadBitmapDataRequest;
			import couk.markstar.starrequests.requests.LoadBitmapRequest;
			import couk.markstar.starrequests.requests.LoadXMLRequest;
			import couk.markstar.starrequests.utils.RequestBatchAsyncUtil;
			import couk.markstar.starrequests.utils.RequestBatchUtil;
			import couk.markstar.starrequests.utils.RequestQueueAsyncUtil;
			import couk.markstar.starrequests.utils.RequestQueueUtil;
			
			protected var _queue:RequestQueueUtil = new RequestQueueUtil();
			
			protected function loadXMLClickListener( e:MouseEvent ):void
			{
				var request:IRequest = new LoadXMLRequest( xmlURL.text );
				request.startedSignal.add( startedListener );
				request.progressSignal.add( progressListener );
				request.completedSignal.add( loadXMLCompleteListener );
				request.failedSignal.add( failedListener );
				_queue.addRequest( request );
			}
			
			protected function loadXMLCompleteListener( xml:XML ):void
			{
				out( "XML Loaded" );
			}
			
			protected function loadBitmapClickListener( e:MouseEvent ):void
			{
				var request:LoadBitmapRequest = new LoadBitmapRequest( imageURL.text );
				request.startedSignal.add( startedListener );
				request.progressSignal.add( progressListener );
				request.completedSignal.add( loadBitmapCompleteListener );
				request.failedSignal.add( failedListener );
				_queue.addRequest( request );
			}
			
			protected function loadBitmapCompleteListener( image:Bitmap ):void
			{
				out( "Bitmap Loaded: " + image.width + ", " + image.height );
			}
			
			protected function loadBitmapDataClickListener( e:MouseEvent ):void
			{
				var request:LoadBitmapDataRequest = new LoadBitmapDataRequest( imageURL.text );
				request.startedSignal.add( startedListener );
				request.progressSignal.add( progressListener );
				request.completedSignal.add( loadBitmapDataCompleteListener );
				request.failedSignal.add( failedListener );
				_queue.addRequest( request );
			}
			
			protected function loadBitmapDataCompleteListener( image:BitmapData ):void
			{
				out( "Bitmap Loaded: " + image.width + ", " + image.height );
			}
			
			protected function startedListener():void
			{
				out( "Request Started" );
			}
			
			protected function progressListener( progress:Number ):void
			{
				out( "Request Progress: " + ( progress * 100 | 0 ) + "%" );
			}
			
			protected function failedListener( message:String ):void
			{
				out( "Request failed: " + message );
			}
			
			protected function out( message:String ):void
			{
				output.text += message + "\n";
			}
			
			protected function runAsyncBatches( e:MouseEvent ):void
			{
				var batch:RequestBatchAsyncUtil = new RequestBatchAsyncUtil( 3, 1000 );
				batch.startedSignal.add( batchStartedListener );
				batch.progressSignal.add( batchProgressListener );
				batch.completedSignal.add( batchCompletedListener );
				
				var request:IRequest
				for( var i:uint = 0; i < 20; i++ )
				{
					request = new ExampleSynchronousRequest( i );
					request.completedSignal.add( exampleCompleteListener );
					batch.addRequest( request );
				}
				
				
				_queue.addRequest( batch );
			}
			
			protected function runAsyncQueue( e:MouseEvent ):void
			{
				var queue:RequestQueueAsyncUtil = new RequestQueueAsyncUtil( 2, 2000 );
				
				var request:IRequest
				for( var i:uint = 0; i < 20; i++ )
				{
					request = new ExampleSynchronousRequest( i );
					request.completedSignal.add( exampleCompleteListener );
					queue.addRequest( request );
				}
			}
			
			protected function exampleCompleteListener( id:uint ):void
			{
				out( "request completed - " + id );
			}
			
			protected function runBatchListener( e:MouseEvent ):void
			{
				var batch:RequestBatchUtil = new RequestBatchUtil();
				batch.startedSignal.add( batchStartedListener );
				batch.progressSignal.add( batchProgressListener );
				batch.completedSignal.add( batchCompletedListener );
				
				var request:IRequest = new LoadXMLRequest( xmlURL.text );
				request.startedSignal.add( startedListener );
				request.progressSignal.add( progressListener );
				request.completedSignal.add( loadXMLCompleteListener );
				request.failedSignal.add( failedListener );
				batch.addRequest( request );
				
				request = new LoadBitmapRequest( imageURL.text );
				request.startedSignal.add( startedListener );
				request.progressSignal.add( progressListener );
				request.completedSignal.add( loadBitmapCompleteListener );
				request.failedSignal.add( failedListener );
				batch.addRequest( request );
				
				request = new LoadBitmapDataRequest( imageURL.text );
				request.startedSignal.add( startedListener );
				request.progressSignal.add( progressListener );
				request.completedSignal.add( loadBitmapDataCompleteListener );
				request.failedSignal.add( failedListener );
				batch.addRequest( request );
				
				_queue.addRequest( batch );
			}
			
			protected function batchStartedListener():void
			{
				out( "Batch Started" );
			}
			
			protected function batchProgressListener( progress:Number ):void
			{
				out( "Batch Progress: " + ( progress * 100 | 0 ) + "%" );
			}
			
			protected function batchCompletedListener():void
			{
				out( "Batch Completed" );
			}
		]]>
	</fx:Script>
	
	
	<s:VGroup width="100%" height="100%">
		
		<s:HGroup>			
			<s:Button label="Test Async Batches" click="runAsyncBatches(event)" />
			<s:Button label="Test Async Queue" click="runAsyncQueue(event)" />
		</s:HGroup>
		
		<s:Button label="Run batch processes" click="runBatchListener(event)"/>
		
		<s:HGroup width="100%">
			<s:TextInput id="xmlURL" width="100%"/>
			<s:Button label="Load XML" click="loadXMLClickListener(event)"/>
		</s:HGroup>
		
		<s:HGroup width="100%">
			<s:TextInput id="imageURL" width="100%"/>
			<s:Button label="Load Bitmap" click="loadBitmapClickListener(event)"/>
			<s:Button label="Load BitmapData" click="loadBitmapDataClickListener(event)"/>
		</s:HGroup>
		
		<s:TextArea width="100%" height="100%" id="output"/>
		
	</s:VGroup>
	
</s:Application>
